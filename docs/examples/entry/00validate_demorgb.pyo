import tkinter as tk

class Example(tk.Frame):
    """Demonstrating how validation options work
    Parameters
    ----------
    parent : str
        hook to parent widget

    Returns
    -------
    None
    """
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)

        # valid percent substitutions (from the Tk entry man page)
        # note: you only have to register the ones you need; this
        # example registers them all for illustrative purposes
        #
        # %d = Type of action (1=insert, 0=delete, -1 for others)
        # %i = index of char string to be inserted/deleted, or -1
        # %P = value of the entry if the edit is allowed
        # %s = value of entry prior to editing
        # %S = the text string being inserted or deleted, if any
        # %v = the type of validation that is currently set
        # %V = the type of validation that triggered the callback
        #      (key, focusin, focusout, forced)
        # %W = the tk name of the widget

        vcmd = (self.register(self.onValidate),
                '%d', '%i', '%P', '%s', '%S', '%v', '%V', '%W')
        lab = tk.Label(self, text='Enter anything you like in the Entry below ')
        lab.pack()
        self.evar = tk.StringVar()
        self.evar.set('#ff0000')
        self.entry = tk.Entry(self, validate="key", validatecommand=vcmd,
                    textvariable=self.evar)
        self.text = tk.Text(self, height=10, width=40)

        #self.entry.insert(0,'#000000')
        self.entry.pack(side="top", fill="x")
        self.text.pack(side="bottom", fill="both", expand=True)

    def onValidate(self, d, i, P, s, S, v, V, W):
        """Validation options

        Paramters
        ---------
        d : str
            action
        i : str
            index
        P : str
            text if allowed
        s : str
            entry prior to editing
        S : str
            input
        v : str
            type of validation as set
        V : str
            type of validation trigger
        W : str
            widget name

        Returns
        -------
        boolean
        """
        self.text.delete("1.0", "end")
        self.text.insert("end", "OnValidate:\n")
        self.text.insert("end", "d='%s'\n" % d)
        self.text.insert("end", "i='%s'\n" % i)
        self.text.insert("end", "P='%s'\n" % P)
        self.text.insert("end", "s='%s'\n" % s)
        self.text.insert("end", "S='%s'\n" % S)
        self.text.insert("end", "v='%s'\n" % v)
        self.text.insert("end", "V='%s'\n" % V)
        self.text.insert("end", "W='%s'\n" % W)
        '''
        # Disallow anything but lowercase letters
        if S == S.lower():
            return True
        else:
            self.bell()
            return False
        '''
        i = int(i)  # index is string!
        #if ind == 0 and text == '#':
        if 1<= i <= 7:
            try:
                int(S[1:], 16)
                return True     # accept hexadecimal
            except ValueError:  # not a hex
                return False
        #return False
        return False

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(fill="both", expand=True)
    root.mainloop()
